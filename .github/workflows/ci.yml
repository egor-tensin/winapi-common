name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Linting
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Run clang-format
        run: ./cmake/tools/project-clang-format.py

  build:
    strategy:
      matrix:
        toolset: [mingw, vs2019]
        platform: [x64, x86]
        configuration: [Debug, RelWithDebInfo]
        include:
          - boost-version: 1.72.0
          # MinGW builds are done on Linux, since it's more up-to-date there,
          # and it's much faster.
          - {toolset: mingw,  os: ubuntu-latest}
          - {toolset: vs2019, os: windows-2019}
    runs-on: '${{ matrix.os }}'
    name: 'Build: ${{ matrix.toolset }} / ${{ matrix.platform }} / ${{ matrix.configuration }}'
    defaults:
      run:
        shell: pwsh
    env:
      TOOLSET: '${{ matrix.toolset }}'
      PLATFORM: '${{ matrix.platform }}'
      CONFIGURATION: '${{ matrix.configuration }}'
      BOOST_VERSION: '${{ matrix.boost-version }}'
      CMAKE_FLAGS: -D WINAPI_COMMON_TESTS=ON
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Cache Boost
        uses: actions/cache@v3
        with:
          path: '${{ runner.workspace }}/build/boost_*.tar.gz'
          key: 'boost_${{ env.BOOST_VERSION }}'
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Set up MinGW
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: '${{ matrix.platform }}'
        if: matrix.toolset == 'mingw'
      - name: Build Boost
        run: make deps
      - name: Build
        run: make install
      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: 'winapi-common-${{ matrix.toolset }}-${{ matrix.platform }}-${{ matrix.configuration }}'
          path: '${{ runner.workspace }}/build/install/'
          if-no-files-found: error
      - name: Test
        run: make test
        if: runner.os == 'Windows'
      - name: Upload test logs
        uses: actions/upload-artifact@v3
        with:
          name: 'test_logs-${{ matrix.toolset }}-${{ matrix.platform }}-${{ matrix.configuration }}'
          path: |
            ${{ runner.workspace }}/build/**/*_tests.log
            ${{ runner.workspace }}/build/**/*_report.txt
          if-no-files-found: error
        if: always() && runner.os == 'Windows'

  docs:
    needs: [lint, build]
    runs-on: ubuntu-latest
    name: Docs
    if: github.ref == 'refs/heads/master'
    env:
      TOOLSET: mingw
      PLATFORM: auto
      CONFIGURATION: Debug
      BOOST_VERSION: 1.65.0
      CMAKE_FLAGS: -D WINAPI_COMMON_TESTS=OFF
    steps:
      # This is rather stupid. In order to build Doxygen docs, I need a working
      # CMake build directory, so I assume that means I need to pretty much
      # build the project. TODO: research if this is possible without having a
      # Doxyfile.
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Cache Boost
        uses: actions/cache@v3
        with:
          path: '${{ runner.workspace }}/build/boost_*.tar.gz'
          key: 'boost_${{ env.BOOST_VERSION }}'
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Set up MinGW
        uses: egor-tensin/setup-mingw@v2
      - name: Install Doxygen
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends doxygen
      - name: Build Boost
        run: make deps
      - name: Build
        run: make install
      - name: Build docs
        run: make docs
      - name: Publish to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: ../build/cmake/html
          single-commit: true
